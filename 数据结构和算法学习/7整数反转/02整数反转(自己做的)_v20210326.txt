/**
 * 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
 * 如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。
 * 假设环境不允许存储 64 位整数（有符号或无符号）。
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/reverse-integer
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * 
 * 解决思路： 将整数依次求余数，然后将余数*10 ，知道商为10的时候，停止循环。 
 *
 * 
 */
class Solution {
    public int reverse(int x) {
		int flag = 1;
		if( x < 0){
			flag = -1
		}
		int result = 0;
		int quotient = 0;
		while((quotient = x / 10) > 10){
			// 余数
			int remainder = x % 10 
			// quotient 商 
			int quotient = x / 10
			x = quotient;
			result += result * 10 + remainder;
		}
		return flag*result;
    }
}

/**
 * 整数反转的测试类
 * 
 * @author lpf 
 * @date 2021年3月26日16:50:33
 */
public class ReverseTest(){

	@Test
	public void test1(){
		Solution demo = new Solution();
		int x = 123;
		int result = demo.reverse(x);
		Assert.assertEquals(-123,result);
	}
	
	@Test
	public void test2(){
		Solution demo = new Solution();
		int x = -123;
		int result = demo.reverse(x);
		Assert.assertEquals(-321,result);
	}
	
	@Test
	public void test3(){
		Solution demo = new Solution();
		int x = 120;
		int result = demo.reverse(x);
		Assert.assertEquals(21,result);
	}
	
	@Test
	public void test4(){
		Solution demo = new Solution();
		int x = 0;
		int result = demo.reverse(x);
		Assert.assertEquals(0,result);
	}
	
	
	 
}









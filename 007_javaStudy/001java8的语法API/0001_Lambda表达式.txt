Lambda表达式 

Lambda表达式的标准格式：
三要素：
1. 一些参数
2. 一个箭头
3. 一些代码

(参数类型 参数名称)->{ 一些代码}

Lambda表达式的省略规则：
1. 参数类型可以省略，但是只能同时省略所有参数的类型，或者干脆都不省略，不能只写个别参数类型
2. 如果参数有钱仅有一个，那么小括号可以省略 
3. 如果大括号之内的语句，那么无论有没有返回值，那么大括号和分号都可以省略。 

Lambda 表达式的使用前提：
1.必须保证有一个接口，而且其中的抽象方法有且仅有一个。 
2.必须有上下文环境



函数式接口(可以使用Lambda表达式)：
	接口当中有且仅有一个抽象方法
@FunctionalInterface注解: 用来检测一个接口是不是函数式接口。 
编译的时候，写上这个注解：
1. 如果是函数式接口，那么编译通过
2. 如果不是函数式接口，那么编译失败。 

注意事项：
@FunctionalInterface 注解是可选的，就算是不用这个注解，只要保证接口满足函数式接口的定义要求，也照样是函数式接口。 


Lambda表达式和匿名内部类的关系：
Lambda表达式并不是匿名内部类的"语法糖"。
语法糖: 代码的写法更加简单，但其实原理不变。 
	例如：
		1. 方法当中的可变参数。 底层依然是一个数组。 
		2. 增强for循环用于 java.lang.Iterable 实现类型时，底层仍然是一个迭代器
		3. 自动装箱，自动拆箱
但是Lambda表达式和匿名内部类存在根本区别，不是语法糖。 
1. 所需的类型不一样
	如果是匿名内部类，那么可以用接口，还可以用抽象类，甚至可以是普通的类。 
	如果是Lambda表达式，那么必须是接口。 
2. 使用的限制不同：
	如果接口当中有且仅有一个抽象方法，那么可以使用lambda 表达式，也可以使用匿名内部类。 但是如果接口当中抽象方法不唯一，那么只能使用匿名内部类，不能使用使用Lambda表达式。 
3. 实现原理不同：
	匿名内部类编译之后，会生成一个单独的.class字节码文件。
	Lambda表达式：编译之后，没有单独的.class字节码文件，对应的字节码会在运行的时候才会动态生成。 

函数式接口：
接口的组成部分:
	接口的组成部分：
		1. 常量
		2. 抽象方法
		3. 默认方法(java 8): 主要用于接口升级
			设计模式当中的开闭原则： 对扩展开发，对修改关闭
			从java 8 开始，接口当中运行定义default默认方法，
			常量的修饰符: public static final （都可以省略）
			抽象方法的修饰符： public abstract (都可以省略)
			默认方法的修饰符： public default (public 可以省略，default不能省略)
			默认方法可以有方法体实现。 
			默认方法也可以进行覆盖重新(去掉default关键字,重新定义方法体)
		4. 静态方法(java 8)

		5. 私有方法(java 9)



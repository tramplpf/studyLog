# 代码编写方面的一些经验

一个项目组内应该有一些很好的沟通，指定一些必要的规范，大家共同遵守一些规范，只有在一些共同的基础上，才能保证成员之间编写的代码可以进行服用，才能提高开发效率。
   如果每个人都有自己开发的习惯，看似编写代码比较快，但是，代码复用性很长，长期来看，随着系统的变大，系统将变得越来越不可维护。

** 系统间交互需求的设计
*** 系统间交互的需求，可以分为几类情况，需要分情况讨论
    1. 给外部系统提供数据接口
    2. 利用外部系统的数据生成系统内部数据。
       例如，利用CIMS的数据来生成nts系统内部的交易流水。
       这种情况下，存在术语的不对应，这种情况下，首先要基于术语达成对应关系。 比如CIMS中的基金代码对应NTS系统的子产品代码，CIMS中的组合代码对应NTS系统中的分盘代码
   
** 系统内代码编写相关经验
*** 对于千万级别，JVM中，容纳这么多数据的情况下，容易发生OOM，因此可以考虑将数据不怎么活跃的数据放置在redis中，通过从redis中获取数据取代从数据库中获取数据，可以获得很好的性能。
    案例： NTS系统老系统中同步证券信息，耗时半个消失，优化后，耗时  2分钟。
    数据量是30多万条数据.
    原先的实现方案： 全删，全加
    优化后的实现方案： 识别增量，修改变更过的证券信息。识别增量的时候，将本地库的证券信息放置到redis中，利用redis高效的访问性能，来提升识别增量的效率
*** 对于大数据量处理的时候，对于十万以内数据的处理，一般情况下批量数据的查询，性能会好于单条记录查询，然后循环便利的效果，
    采用牺牲空间来换时间
    <2022-11-20 日>
   
## 系统内设计的相关经验
* 代码中，每个方法的长度限制在30行内，逻辑复杂的应该限制在50行内。
  30行代码其实已经可以完成一些业务逻辑了。如果方法长度过长，我们可能需要思考是否是设计不足，导致需要很多的代码来应对复杂的逻辑。
* 在系统中，在service层的基础上，引入一个biz层，biz层进行业务逻辑的开发，service进行事务相关的操作。
  通过添加一层biz层，我们适当的调整代码的逻辑来保证service中数据库的操作时间尽量短，保证事务短小，有利于提升整个系统的性能
  <2022-11-20 日>
* 在编写代码的时候，将每个service（或者biz）看作是一个模块，不同模块之间应该依赖比较少。如果一个biz层或者service层，依赖的内容过多，
  可能意味着该类的职责太多了，或许应该考虑对类进行重构
* 代码应该遵守高内聚和低耦合，将系统拆分成一个一个模块。
  <2022-11-20 日>

## 系统间设计相关的经验
* 在进行系统间设计的时候，可以假设一个前提：外部系统不可靠，不能随时配合自己进行测试。
  <2022-11-20 日>
* 在设计的时候，应该有相关的机制来模拟外部系统。这样，每个系统内部的开发才不会受限于外部系统（其他系统）
  <2022-11-20 日>
* 系统之间交互的方式很多，例如消息队列，http请求等。 我们应该对常用的消息队列有清楚的认识，对其特性有充足的了解，才能很好的利用她们完成系统之间数据的交互
  <2022-11-20 日>
* 在微服务中，不同服务之间进行调用的接口，应该尽可能的少，如果服务之间调用的接口很多，说明服务拆分的不合理 。需要进行思考，避免服务之间存在太多的接口。
  <2022-11-20 日>
* 
